name: Main

on: push

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
#  build_and_test:
#    name: Build and test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cargo/bin/
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            target/
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#
#      - name: Build
#        run: cargo build --locked --verbose
#
#      - name: Run tests
#        run: cargo test --verbose

  build_docker:
    if: startsWith(github.event.ref, 'refs/tags/v')
#    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    name: Build and push Docker images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create short version name
        id: short_version
        run: |
          version=$(echo "${{ github.ref_name }}" | sed 's/\.[0-9]*$//g')
          echo "value=$version" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        env:
          IMAGE_PATH: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_VERSION: ${{ github.ref_name }}
          IMAGE_VERSION_SHORT: ${{ steps.short_version.outputs.value }}
        run: |
          targets=("x86_64-unknown-linux-musl" "aarch64-unknown-linux-musl")
  
          for target in "${targets[@]}"; do
            docker buildx build \
              --file builder/Dockerfile \
              --tag "$IMAGE_PATH:latest" \
              --tag "$IMAGE_PATH:$IMAGE_VERSION" \
              --tag "$IMAGE_PATH:$IMAGE_VERSION_SHORT" \
              --build-arg BASE="ghcr.io/rust-cross/rust-musl-cross:$target" \
              --build-arg TARGET="$target" \
              . --push
          done
